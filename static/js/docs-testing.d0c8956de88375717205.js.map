{"version":3,"sources":["/Users/llira/Code/whatever/docs/testing.mdx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"qUAYMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,WADR,WAGA,uUAEsE,+BAAGC,WAAW,KAAQ,CACxF,KAAQ,uBAD0D,QAFtE,KAKA,iBAAQ,CACN,GAAM,SADR,SAGA,iBAAQ,CACN,GAAM,WADR,YAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,4+BAsCL,iBAAQ,CACN,GAAM,yBADR,0BAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,2GAML,iBAAQ,CACN,GAAM,6BADR,8BAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,qHAQL,iBAAQ,CACN,GAAM,wBADR,yBAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,keAgBL,iBAAQ,CACN,GAAM,uBADR,wBAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,0rBAqBL,6FACF,+BAAGA,WAAW,KAAQ,CAChB,KAAQ,oDADd,QADE,sIAKF,+BAAGA,WAAW,KAAQ,CAChB,KAAQ,oGADd,QALE,qIASE,+BAAGA,WAAW,KAAQ,CACpB,KAAQ,qGADV,SATF,YAYA,iBAAQ,CACN,GAAM,cADR,cAGA,8B,sKAKJJ,EAAWK,gBAAiB","file":"static/js/docs-testing.0da0bc83.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"testing\"\n    }}>{`Testing`}</h1>\n    <p>{`One of the main design decisions of this library, was to keep it easier to test the business logic in your selectors,\nreducers, and effects, in spite of the abstraction. As a matter of fact, we believe it's actually simpler than\ntesting vanilla redux. Given the model below, let's try to test it with `}<a parentName=\"p\" {...{\n        \"href\": \"https://jestjs.io/\"\n      }}>{`jest`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"model\"\n    }}>{`Model`}</h2>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example:`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import {Model} from 'react-resux';\nimport _ from 'lodash';\n\nexport const counterModel = new Model({\n    namespace: 'counter',\n    state: {\n        count: 0,\n    },\n    selectors: {\n        count: (state) => state.counter.count,\n    },\n    reducers: {\n        increment(state, {}) {\n          state.count += 1;\n        },\n        decrement(state, {}) {\n          state.count -= 1;\n        },\n        incrementByX(state, {x}) {\n          state.count += x;\n        },\n    },\n    effects: {\n      *asyncIncrement(action, { put }, { increment }) {\n          // This is not useful in practice, since there's no async behaviour per se, but is defined for\n          // example's sake.\n          yield put(increment());\n      },\n      *asyncDecrement(action, { put }, { decrement }) {\n          // This is not useful in practice, since there's no async behaviour per se, but is defined for\n          // example's sake.\n          yield put(decrement());\n      },\n    },\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"testing-the-namespace\"\n    }}>{`Testing the namespace:`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`it('namespace is set to counter', () => {\n  expect(counterModel.namespace).toEqual('counter');\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"testing-the-initial-state\"\n    }}>{`Testing the initial state:`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`it('initial state is properly set', () => {\n  expect(counterModel.state).toEqual({\n    count: 0,\n  });\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"testing-the-reducers\"\n    }}>{`Testing the reducers:`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const action = {}; // It's empty, since the reducers don't use the action's data\n\nit('increments reducer change count to current + 1', () => {\n  const state = {...counterModel.state};\n  counterModel.reducers.increment(state, action);\n  expect(state.count).toEqual(1);\n});\n\nit('decrements reducer change count to current - 1', () => {\n  const state = {...counterModel.state};\n  counterModel.reducers.decrement(state, action);\n  expect(state.count).toEqual(-1);\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"testing-the-effects\"\n    }}>{`Testing the effects:`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import * as sagaEffects from 'redux-saga/effects'\n\nconst action = {}; // It's empty, since the effects don't use action's data\nconst actionCreators = counterModel.actionCreators();\n\nit('asyncIncrement effect yields put increment reducer', () => {\n  const gen = counterModel.effects.asyncIncrement(action, sagaEffects, actionCreators);\n  expect(gen.next().value).toEqual(\n    sagaEffects.put(actionCreators.increment())\n  );\n});\n\nit('asyncDecrement effect yields put decrement reducer', () => {\n  const gen = counterModel.effects.asyncDecrement(action, sagaEffects, actionCreators);\n  expect(gen.next().value).toEqual(\n    sagaEffects.put(actionCreators.decrement())\n  );\n});\n`}</code></pre>\n    <p>{`In case you are wondering how to test blocking effects, such as the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://redux-saga.js.org/docs/api/#callfn-args\"\n      }}>{`call`}</a>{` effect, you can set the value returned by an yield expression\ninside a generator. That's possible by passing an argument to its\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/next\"\n      }}>{`next`}</a>{` method.\nAlso, whenever you need to inject an exception within a generator, in order to test a try-catch block, you can use\nthe `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/throw\"\n      }}>{`throw`}</a>{` method.`}</p>\n    <h2 {...{\n      \"id\": \"subscriber\"\n    }}>{`Subscriber`}</h2>\n    <p>{`TODO`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}