{"version":3,"sources":["/Users/llira/Code/whatever/docs/gettingStarted.mdx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"static/js/docs-getting-started.ba061963.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting Started`}</h1>\n    <p>{`This tutorial will introduce you to the basics of react-resux by building a counter application, which will\nnot only display the current counter value, but that also provides the means for incrementing/decrementing.\nAdditionaly, the application requires a confirmation step, whenever its user tries to increment/decrement\nthe counter value.`}</p>\n    <h2 {...{\n      \"id\": \"tldr\"\n    }}>{`TLDR`}</h2>\n    <p>{`This tutorial is composed of both the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/kayak/react-resux/tree/master/examples/counterWithConnectResux\"\n      }}>{`counterWithConnectResux`}</a>{` and\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/kayak/react-resux/tree/master/examples/counterWithConnectResuxAndConfirmationDialog\"\n      }}>{`counterWithConnectResuxAndConfirmationDialog`}</a>{`\nexamples. In the end, our high order component (`}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/higher-order-components.html\"\n      }}>{`HOC`}</a>{`) API will be replaced with its hook based equivalent,\nsuch as in `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/kayak/react-resux/tree/master/examples/counterWithHooks\"\n      }}>{`counterWithHooks`}</a>{` example.\nTo see all examples click `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/kayak/react-resux#demos\"\n      }}>{`here`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <p>{`This tutorial assumes that you know the basics of how to use `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/\"\n      }}>{`react`}</a>{`. If you don't know what `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/\"\n      }}>{`react`}</a>{` is and how to\nuse it, you may wish to read `}<a parentName=\"p\" {...{\n        \"href\": \"https://facebook.github.io/react/tutorial/tutorial.html\"\n      }}>{`this tutorial`}</a>{` first.`}</p>\n    <h3 {...{\n      \"id\": \"do-i-need-to-learn-redux-and-react-redux\"\n    }}>{`Do I need to learn redux and react-redux?`}</h3>\n    <p>{`React-resux is heavily based on `}<a parentName=\"p\" {...{\n        \"href\": \"https://redux.js.org/\"\n      }}>{`redux`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://react-redux.js.org/\"\n      }}>{`react-redux`}</a>{`. A basic understanding of `}<a parentName=\"p\" {...{\n        \"href\": \"https://redux.js.org/\"\n      }}>{`redux`}</a>{` will help you\nbeing familiar with concepts such as reducers, actions, action creators, middlewares, etc, which react-resux\nalso depend upon. Likewise, knowing `}<a parentName=\"p\" {...{\n        \"href\": \"https://react-redux.js.org/\"\n      }}>{`react-redux`}</a>{` will help the connecting of the data with `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/\"\n      }}>{`react`}</a>{` components.`}</p>\n    <h3 {...{\n      \"id\": \"do-i-need-to-learn-redux-saga\"\n    }}>{`Do I need to learn redux-saga?`}</h3>\n    <p>{`React-resux uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://redux-saga.js.org/\"\n      }}>{`redux-saga`}</a>{` for asynchronous bits, when implementing asynchronous workflows that would often\ninvolve multiple reducers at different points in time. If you don't know what `}<a parentName=\"p\" {...{\n        \"href\": \"https://redux-saga.js.org/\"\n      }}>{`redux-saga`}</a>{` is and how to\nuse it, you may wish to read `}<a parentName=\"p\" {...{\n        \"href\": \"https://redux-saga.js.org/docs/introduction/BeginnerTutorial.html\"\n      }}>{`this tutorial`}</a>{`\nfirst.`}</p>\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`React-resux is an opinionated, `}<a parentName=\"p\" {...{\n        \"href\": \"https://redux.js.org/\"\n      }}>{`redux`}</a>{` abstraction with built-in immutability, async and more. If the above sentence\nconfused you, don't worry. We will dive deeper together and explore what it means step by step.`}</p>\n    <h2 {...{\n      \"id\": \"getting-started-1\"\n    }}>{`Getting Started`}</h2>\n    <p>{`When building applications with react-resux, the first exercise that will help you building your application is\nthinking about what is the minimal set of entities. In our example application we will deal with a counter, so we\nneed a counter entity. The counter entity will have a count attribute, in order to track the count number.`}</p>\n    <p>{`So far our entities and their attributes look like this:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`counter`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`count`}</li>\n        </ul></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"creating-our-first-model\"\n    }}>{`Creating our first model`}</h2>\n    <p>{`Central to react-resux is the concept of a `}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/concepts#model\"\n      }}>{`model`}</a>{`. The `}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/concepts#model\"\n      }}>{`model`}</a>{` consists of the set of state, selectors, actions,\nreducers and asynchrounous workflows (i.e. effects) that are related to a given entity. In orther words, they\nrepresent the boilerplate around a given reducer plus the async bits handled by some `}<a parentName=\"p\" {...{\n        \"href\": \"https://redux.js.org/advanced/middleware\"\n      }}>{`redux middleware`}</a>{`. This\nmeans that in order to make our application work, we need to describe to react-resux how our `}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/concepts#model\"\n      }}>{`model`}</a>{` looks like.`}</p>\n    <p>{`To define a `}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/concepts#model\"\n      }}>{`model`}</a>{` for an entity in react-resux is to provide a set of options when instantiating a `}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/concepts#model\"\n      }}>{`model`}</a>{` class.\nEach instanted `}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/concepts#model\"\n      }}>{`model`}</a>{` needs at least its namespace and initial state to be provided. Therefore, the simplest\n`}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/concepts#model\"\n      }}>{`model`}</a>{` we could define would be:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import {Model} from 'react-resux';\n\nexport const countModel = new Model({\n    // Mandatory options\n    namespace: 'counter',\n    state: {\n        count: 0,\n    },\n});\n`}</code></pre>\n    <p>{`At this point were not even using this `}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/concepts#model\"\n      }}>{`model`}</a>{`, so let's try to display that count value we defined in the state\noption. Before proceeding with actual UI work, we'd need to hook our `}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/concepts#model\"\n      }}>{`model`}</a>{` to both `}<a parentName=\"p\" {...{\n        \"href\": \"https://redux.js.org/\"\n      }}>{`redux`}</a>{` and our favourite\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://redux.js.org/advanced/middleware\"\n      }}>{`redux middleware`}</a>{` (i.e. `}<a parentName=\"p\" {...{\n        \"href\": \"https://redux-saga.js.org/\"\n      }}>{`redux-saga`}</a>{`) for handling async workflows. The way we can do that is explained in the\n`}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/redux-integration\"\n      }}>{`Integrating with Redux/Redux Saga`}</a>{` section. Assuming you've set everything right, you can now try to see your\nmodels' state in your application redux state, by using something like\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd\"\n      }}>{`Redux DevTools`}</a>{`.`}</p>\n    <p>{`For the sake of example, the application state would be somewhat similar to:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  counter: {\n    count: 0\n  },\n  // your other reducer's state\n}\n`}</code></pre>\n    <p>{`Notice that countModel.state is namespaced with the namespace option provided to the `}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/concepts#model\"\n      }}>{`model`}</a>{`. By now you probably\nrealised that `}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/concepts#model\"\n      }}>{`model`}</a>{`'s namespaces must be unique. And you'd be totally right to assume that. In fact react-resux\nwill enforce that when calling\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://kayak.github.io/react-resux/README.md#combinemodelreducers\"\n      }}>{`combineModelReducers`}</a>{` function. Enough of\ndigressions though.`}</p>\n    <h2 {...{\n      \"id\": \"getting-to-the-ui\"\n    }}>{`Getting to the UI`}</h2>\n    <p>{`Let's assume a very simple component, that just displays the counter's count. Something on the lines of:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`export function Counter({count}) {\n  return count;\n}\n`}</code></pre>\n    <p>{`That doesn't have access to the counter `}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/concepts#model\"\n      }}>{`model`}</a>{` yet, so let's do that. Since react-resux uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://redux.js.org/\"\n      }}>{`redux`}</a>{`, we could just\nuse the `}<a parentName=\"p\" {...{\n        \"href\": \"https://react-redux.js.org/api/connect\"\n      }}>{`connect`}</a>{` high order component (`}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/higher-order-components.html\"\n      }}>{`HOC`}</a>{`) like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import {connect} from 'react-redux';\nimport {countModel} from './models';\n\nexport function Counter({count}) {\n  return count;\n}\n\nfunction mapStateToProps(state, props) {\n  return {\n    count: state.counter.count,\n  };\n}\n\nexport default connect(mapStateToProps)(Counter);\n`}</code></pre>\n    <p>{`That's all nice and swell, but react-resux actually provide more powerful constructs for connecting your components\nto the redux state. For such we have two options. To use `}<a parentName=\"p\" {...{\n        \"href\": \"https://kayak.github.io/react-resux/README.md#connectresux\"\n      }}>{`connectResux`}</a>{` high order component (`}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/higher-order-components.html\"\n      }}>{`HOC`}</a>{`) or the equivalent\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/hooks-reference.html\"\n      }}>{`hooks`}</a>{` API. Later on we will dive into the `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/hooks-reference.html\"\n      }}>{`hooks`}</a>{` API, but for now `}<a parentName=\"p\" {...{\n        \"href\": \"https://kayak.github.io/react-resux/README.md#connectresux\"\n      }}>{`connectResux`}</a>{` will do the trick.`}</p>\n    <h2 {...{\n      \"id\": \"reading-data-through-selectors\"\n    }}>{`Reading data through selectors`}</h2>\n    <p>{`As you might have imagined, `}<a parentName=\"p\" {...{\n        \"href\": \"https://kayak.github.io/react-resux/README.md#connectresux\"\n      }}>{`connectResux`}</a>{` is to react-resux, what `}<a parentName=\"p\" {...{\n        \"href\": \"https://react-redux.js.org/api/connect\"\n      }}>{`connect`}</a>{` is to `}<a parentName=\"p\" {...{\n        \"href\": \"https://redux.js.org/\"\n      }}>{`redux`}</a>{`. In other words, it allows\nyour component to dispatch action, for modifying the state, or reading from the state. But before we go about\nusing `}<a parentName=\"p\" {...{\n        \"href\": \"https://kayak.github.io/react-resux/README.md#connectresux\"\n      }}>{`connectResux`}</a>{`, let's add a selector to our `}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/concepts#model\"\n      }}>{`model`}</a>{`, so that we can read data from it.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import {Model} from 'react-resux';\n\nexport const countModel = new Model({\n    // Mandatory options\n    namespace: 'counter',\n    state: {\n        count: 0,\n    },\n    selectors: {\n      count: (namespacedState) => namespacedState.count\n    },\n});\n`}</code></pre>\n    <p>{`Now let's change our component to use `}<a parentName=\"p\" {...{\n        \"href\": \"https://kayak.github.io/react-resux/README.md#connectresux\"\n      }}>{`connectResux`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import {connectResux} from 'react-resux';\nimport {countModel} from './models';\n\nfunction CountComponent({count}) {\n  return count;\n}\n\nfunction mapStateToProps(state, props, selectors) {\n  return {\n    count: selectors.counter.count(state),\n  };\n}\n\nexport default connectResux([countModel], mapStateToProps)(CountComponent);\n`}</code></pre>\n    <p>{`So we can definitely see a few similarities between `}<a parentName=\"p\" {...{\n        \"href\": \"https://kayak.github.io/react-resux/README.md#connectresux\"\n      }}>{`connectResux`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://react-redux.js.org/api/connect\"\n      }}>{`connect`}</a>{` here. Both have an user defined\nmapStateToProps and, as a matter of fact, can also have an user defined mapDispatchToProps function. Notice\nthat the first argument of `}<a parentName=\"p\" {...{\n        \"href\": \"https://kayak.github.io/react-resux/README.md#connectresux\"\n      }}>{`connectResux`}</a>{` is the list of models the component is going to employ. You might have\nalso noticed that the `}<a parentName=\"p\" {...{\n        \"href\": \"https://kayak.github.io/react-resux/README.md#connectresux\"\n      }}>{`connectResux`}</a>{`'s mapStateToProps also get a third argument. Namely the selectors object,\nwhich contain namespaced references to all the selectors in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://kayak.github.io/react-resux/README.md#connectresux\"\n      }}>{`connectResux`}</a>{`'s provided models. It's important\nto mention that those selectors are all memoised under the hood, so that more complex selectors don't get\nre-computed when data hasn't actually changed.`}</p>\n    <p>{`You can also extra arguments to the selectors, perhaps some id you get from the props. For such just pass extra\npositional arguments to the selector call in the mapStateToProps function. Such as in:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function mapStateToProps(state, props, selectors) {\n  return {\n    count: selectors.counter.count(state, props.someValue),\n  };\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"modifying-data-through-reducers\"\n    }}>{`Modifying data through reducers`}</h2>\n    <p>{`Given we can now display the counter's count, how about adding two buttons to our UI. One for incrementing and\none for decrementing the count. Before we do any sort of UI work, we need to define those reducers in our `}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/concepts#model\"\n      }}>{`model`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import {Model} from 'react-resux';\n\nexport const countModel = new Model({\n    // Mandatory options\n    namespace: 'counter',\n    state: {\n        count: 0,\n    },\n    selectors: {\n      count: (namespacedState) => namespacedState.count\n    },\n    reducers: {\n      increment(state, action) {\n        state.count += 1;\n      },\n      decrement(state, action) {\n        state.count -= 1;\n      },\n      changeCountByX(state, {x}) {\n        state.count += x;\n      },\n    }\n});\n`}</code></pre>\n    <p>{`Notice we have declared three different reducers. Those are mostly for example's sake, since changeCountByX alone\nwould suffice. More importantly, is the fact that we are changing the redux state inplace, which might seem a\nterrible practice to some of you. That's not the case since react-resux will enforce immutability via property\naccessors with `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/immerjs/immer\"\n      }}>{`immer`}</a>{`, so don't ever bother about destructuring/constructing data and/or deep copying values\never again. As a consequence, you can just use shallow comparisons, in order to decide when you need to\nre-render a component.`}</p>\n    <p>{`Despite that, you might be curious on how actions can trigger the reducers we have just created. That's actually\nquite simple. See a few action examples below:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`{type: 'counter.increment'}`}</li>\n      <li parentName=\"ul\">{`{type: 'counter.decrement'}`}</li>\n      <li parentName=\"ul\">{`{type: 'counter.changeCountByX', x: 1}`}</li>\n    </ul>\n    <p>{`One can rightfully assume here they could dispatch those actions and have the respective `}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/concepts#model\"\n      }}>{`model`}</a>{`'s reducers triggered.\nIn other words, any action with type as modelNamespace.reducerName, will trigger the reducerName in question.\nUnlike `}<a parentName=\"p\" {...{\n        \"href\": \"https://react-redux.js.org/api/connect\"\n      }}>{`connect`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"https://kayak.github.io/react-resux/README.md#connectresux\"\n      }}>{`connectResux`}</a>{` won't inject dispatch into connected components. That's because it sets a default\nmapStateToProps, if you havent set any. This default mapDispatchToProps, would have a shape like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  modelANamespace: {\n    modelAReducer1Name: (objectToBeMergedWithAction) => ...\n    modelAEffect1Name: (objectToBeMergedWithAction) => ...\n    // your other reducer and effect's\n  },\n  // your other models\n}\n`}</code></pre>\n    <p>{`So like selectors, in mapStateToProps, your default mapDispatchToProps is namespaced by the models' namespace.\nLet's try to change the example with selectors, in other to use the default mapDispatchToProps for modifying our\nredux state via reducers:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import {connectResux} from 'react-resux';\nimport {countModel} from './models';\n\nfunction CountComponent({count, counter}) {\n  return (\n    <div>\n      <div>Count: {count}</div>\n      <div>\n        <button onClick={counter.increment}>Increment</button> | <button onClick={\n          () => {\n            // We could actually use decrement, but used this for showing how to pass parameters to your dispatchers\n            counter.changeCountByX({x: -1});\n          }\n        }>Decrement</button>\n      </div>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state, props, selectors) {\n  return {\n    count: selectors.counter.count(state),\n  };\n}\n\nexport default connectResux([countModel], mapStateToProps)(CountComponent);\n`}</code></pre>\n    <p>{`Simple right. We just needed to get the counter prop, since that's the namespace of the counter `}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/concepts#model\"\n      }}>{`model`}</a>{` and voilà.\nBut what about when you want to define a custom mapDispatchToProps, like when you need to mix vanilla `}<a parentName=\"p\" {...{\n        \"href\": \"https://redux.js.org/\"\n      }}>{`redux`}</a>{` with\nreact-resux. Like in react-redux, mapDispatchToProps can be declared in either a function form or a object shortand\nnotation. As a function that would look like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import {connectResux} from 'react-resux';\nimport {countModel} from './models';\n\nfunction CountComponent({count, increment, decrement}) {\n  return (\n    <div>\n      <div>Count: {count}</div>\n      <div>\n        <button onClick={increment}>Increment</button> | <button onClick={decrement}>Decrement</button>\n      </div>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state, props, selectors) {\n  return {\n    count: selectors.counter.count(state),\n  };\n}\n\nfunction mapDispatchToProps(dispatch, props, actionCreators) {\n  return {\n    increment: () => dispatch(actionCreators.counter.increment()),\n    decrement: () => dispatch(actionCreators.counter.decrement()),\n  };\n}\n\nexport default connectResux([countModel], mapStateToProps, mapDispatchToProps);\n`}</code></pre>\n    <p>{`Meanwhile by using the object shorthand notation you could just have:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import {connectResux} from 'react-resux';\nimport {countModel} from './models';\n\nfunction CountComponent({count, increment, decrement}) {\n  return (\n    <div>\n      <div>Count: {count}</div>\n      <div>\n        <button onClick={increment}>Increment</button> | <button onClick={decrement}>Decrement</button>\n      </div>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state, props, selectors) {\n  return {\n    count: selectors.counter.count(state),\n  };\n}\n\nconst mapDispatchToProps = {increment, decrement} = countModel.actionCreators();\n\nexport default connectResux([countModel], mapStateToProps, mapDispatchToProps);\n`}</code></pre>\n    <p>{`All that said, you probably noticed that the default mapStateToProps is way easier to implement than both of these\nsolutions, so stick with it unless you have a good reason not to.`}</p>\n    <h2 {...{\n      \"id\": \"having-a-confirmation-dialog\"\n    }}>{`Having a confirmation dialog`}</h2>\n    <p>{`Now we have the basic functionality, we still need a confirmation step via a dialog, whenever users try to\nincrement/decrement the counter value. For such dialog we are going to use the `}<a parentName=\"p\" {...{\n        \"href\": \"https://sweetalert2.github.io/\"\n      }}>{`sweetalert2`}</a>{`, but any would fit.`}</p>\n    <p>{`Although we could implement that with reducers, effects would better capture the logic and\nallow for easier testability, that's harder when the logic for displaying plus confiming is on the component\nlevel. Effects are essentialy an way to implement asynchronous workflows that are very easy to test. Certainly\na consequence of effects being based on `}<a parentName=\"p\" {...{\n        \"href\": \"https://redux-saga.js.org/\"\n      }}>{`redux-saga`}</a>{`. That said, let's see how our counter `}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/concepts#model\"\n      }}>{`model`}</a>{` should look\nlike with the bespoke effects:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import {Model} from 'react-resux';\nimport Swal from \"sweetalert2\";\n\n// Fyi async/await functions are just syntax sugar for functions that return a promisse\nasync function showConfirm(options) {\n  const result = await ReactSwal.fire({\n    showCancelButton: true,\n    showConfirmButton: true,\n      ...options\n  });\n  if (result.value !== true) return false;\n  return true;\n}\n\nexport const countModel = new Model({\n    // Mandatory options\n    namespace: 'counter',\n    state: {\n        count: 0,\n    },\n    selectors: {\n      count: (namespacedState) => namespacedState.count\n    },\n    reducers: {\n      increment(state, action) {\n        state.count += 1;\n      },\n      decrement(state, action) {\n        state.count -= 1;\n      },\n      changeCountByX(state, {x}) {\n        state.count += x;\n      },\n    },\n    effects: {\n      confirmBeforeIncrementing(action, {call, put}, {increment, decrement}) {\n        // Arguments are action, sagaEffects and actionCreators\n        const hasConfirmed = yield sagaEffects.call(showConfirm, {\n          text: \"Are you sure you want to increment?\"\n        });\n\n        if (hasConfirmed) yield put(increment());\n      },\n      confirmBeforeDecrementing(action, {call, put}, {increment, decrement}) {\n        // Arguments are action, sagaEffects and actionCreators\n        const hasConfirmed = yield sagaEffects.call(showConfirm, {\n          text: \"Are you sure you want to decrement?\"\n        });\n\n        if (hasConfirmed) yield put(decrement());\n      },\n    }\n});\n`}</code></pre>\n    <p>{`As you might have noticed by now, effects are just normal `}<a parentName=\"p\" {...{\n        \"href\": \"https://redux-saga.js.org/\"\n      }}>{`redux-saga`}</a>{`'s sagas. For our example, a simple\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://redux-saga.js.org/docs/api/\"\n      }}>{`call`}</a>{` and a simple\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://redux-saga.js.org/docs/api/#putaction\"\n      }}>{`put`}</a>{` effect creators, are enough to do the job. How are we\ngoing to use them in the component level, you might be wondering. And actually they're accessed the same way\nas reducers on the component level. So you could just change your component to, assuming the one using a default\nmapDispatchToProps:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import {connectResux} from 'react-resux';\nimport {countModel} from './models';\n\nfunction CountComponent({count, counter}) {\n  return (\n    <div>\n      <div>Count: {count}</div>\n      <div>\n        <button onClick={counter.confirmBeforeIncrementing}>Increment</button> |\n        <button onClick={counter.confirmBeforeDecrementing}>Decrement</button>\n      </div>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state, props, selectors) {\n  return {\n    count: selectors.counter.count(state),\n  };\n}\n\nexport default connectResux([countModel], mapStateToProps)(CountComponent);\n`}</code></pre>\n    <p>{`Neat right? That covers basically all the functionality that the `}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/concepts#model\"\n      }}>{`model`}</a>{` class exposes. So now you can go ahead and\nimplement your own.`}</p>\n    <h2 {...{\n      \"id\": \"going-further-using-our-hooks-api\"\n    }}>{`Going further: Using our Hooks API`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/hooks-reference.html\"\n      }}>{`Hooks`}</a>{` are the new sensation in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/\"\n      }}>{`react`}</a>{` world and rightfully so. In fact, we took them into account since\nthe get go. For such, we expose three `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/hooks-reference.html\"\n      }}>{`hooks`}</a>{`, namely `}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/README.md#usemodelactions\"\n      }}>{`useModelActions`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/README.md#usesubscriberactions\"\n      }}>{`useSubscriberActions`}</a>{`, and\n`}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/README.md#usemodelselector\"\n      }}>{`useModelSelector`}</a>{`. So that we could, write the previous examples as:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import {useModelActions, useModelSelector} from 'react-resux';\nimport {countModel} from './models';\n\nexport default function CountComponent({count, counter}) {\n  const {confirmBeforeIncrementing, confirmBeforeDecrementing} = useModelActions(counterModel);\n  const count = useModelSelector(counterModel, (state, selectors) => selectors.count(state));\n\n  return (\n    <div>\n      <div>Count: {count}</div>\n      <div>\n        <button onClick={confirmBeforeIncrementing}>Increment</button> |\n        <button onClick={confirmBeforeDecrementing}>Decrement</button>\n      </div>\n    </div>\n  );\n}\n`}</code></pre>\n    <p>{`It does look more compact than previous solutions, so we'd strongly recommend you to use our `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/hooks-reference.html\"\n      }}>{`hooks`}</a>{` API instead of\nthe `}<a parentName=\"p\" {...{\n        \"href\": \"https://kayak.github.io/react-resux/README.md#connectresux\"\n      }}>{`connectResux`}</a>{` high order component (`}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/higher-order-components.html\"\n      }}>{`HOC`}</a>{`).`}</p>\n    <h2 {...{\n      \"id\": \"next-up\"\n    }}>{`Next up`}</h2>\n    <p>{`In (the still TODO) part 2 of this tutorial, we will discover how to use a `}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/concepts#subscriber\"\n      }}>{`subscriber`}</a>{` to make `}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/concepts#model\"\n      }}>{`model`}</a>{` collaborate\nvia a simple interface.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}