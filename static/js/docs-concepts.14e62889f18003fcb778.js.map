{"version":3,"sources":["/Users/llira/Code/whatever/docs/concepts.mdx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mUAYMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,SADR,SAGA,oKAEA,iBAAQ,CACN,GAAM,WADR,YAGA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,wBADZ,gjCAwCL,mRAGA,iBAAQ,CACN,GAAM,iBADR,iBAGA,oEAAmD,+BAAGA,WAAW,KAAQ,CACrE,KAAQ,eADuC,aAAnD,QAE+B,+BAAGA,WAAW,KAAQ,CACjD,KAAQ,eADmB,SAF/B,sBAKF,+BAAGA,WAAW,KAAQ,CAChB,KAAQ,eADd,aALE,KAO4B,+BAAGA,WAAW,KAAQ,CAC9C,KAAQ,cADgB,YAP5B,KAS2B,+BAAGA,WAAW,KAAQ,CAC7C,KAAQ,aADe,WAT3B,qCAYF,+BAAGA,WAAW,KAAQ,CAChB,KAAQ,4CADd,QAZE,KAeA,iBAAQ,CACN,GAAM,eADR,gBAGA,0CAAyB,+BAAGA,WAAW,KAAQ,CAC3C,KAAQ,kCADa,QAAzB,KAGA,iBAAQ,CACN,GAAM,cADR,cAGA,4YAIA,iBAAQ,CACN,GAAM,aADR,YAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,0OAWL,iBAAQ,CACN,GAAM,mBADR,oBAGA,0CAAyB,+BAAGA,WAAW,KAAQ,CAC3C,KAAQ,uCADa,QAAzB,M,uKAOJJ,EAAWK,gBAAiB","file":"static/js/docs-concepts.35efc34c.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"model\"\n    }}>{`Model`}</h2>\n    <p>{`Models are the most basic data structure/abstraction in this library. They require a set of options to be provided\nwhen initializing them.`}</p>\n    <h4 {...{\n      \"id\": \"example\"\n    }}>{`Example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import {Model} from 'react-resux';\nimport _ from 'lodash';\n\nasync function fetchApi(url) {\n  return await fetch(url).then(response => response.json());\n}\n\nexport const userModel = new Model({\n    // Mandatory options\n    namespace: 'users',\n    state: {\n        loading: {},\n        data: {},\n    },\n\n    // Optional options\n    selectors: {\n        loadingByUser: (state, userId) => _.get(state, \\`users.loading[\\${userId}]\\`, true),\n        userById: (state, userId) => _.get(state, \\`users.data[\\${userId}]\\`),\n    },\n    reducers: {\n        saveUser(state, { data, userId }) {\n          state.loading[userId] = false;\n          state.data[userId] = data;\n        },\n    },\n    effects: {\n        *fetchUser({ userId }, { call, put }) {\n            try {\n                const data = yield call(fetchApi, \\`http://jsonplaceholder.typicode.com/users/\\${userId}\\`);\n                yield put({type: \"users.saveUser\", data, userId});\n             } catch (error) {\n                console.log(error)\n             }\n        },\n    },\n});\n`}</code></pre>\n    <p>{`The model will be used to generate the action types, actions, reducers, sagas and dispatchers for this particular\nentity (i.e. users). Below you can find a more in depth description on the many options that can be used during a\nmodel instantiation.`}</p>\n    <h3 {...{\n      \"id\": \"model-options\"\n    }}>{`Model Options`}</h3>\n    <p>{`An object with a few key-value pairs. Being `}<a parentName=\"p\" {...{\n        \"href\": \"#namespace\"\n      }}>{`namespace`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#namespace\"\n      }}>{`state`}</a>{` mandatory, while\n`}<a parentName=\"p\" {...{\n        \"href\": \"#selectors\"\n      }}>{`selectors`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"#reducers\"\n      }}>{`reducers`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"#effects\"\n      }}>{`effects`}</a>{` are optional. For more info see\n`}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/interfaces/modeloptions.md\"\n      }}>{`this`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"modelss-api\"\n    }}>{`Models's API`}</h3>\n    <p>{`For more info see `}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/classes/model.md\"\n      }}>{`this`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"subscriber\"\n    }}>{`Subscriber`}</h2>\n    <p>{`Subscribers provide a way to link models' effects/reducers, so that they get triggered by the same non-namespaced\naction type, on a leading, latest, or every action basis. That is, they provide the means for generating redux sagas\nemploying takeLeading, takeLatest, or takeEvery effects. Those models' action creators will be available within the\nsubscriber's effects.`}</p>\n    <h4 {...{\n      \"id\": \"example-1\"\n    }}>{`Example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import {Subscriber} from 'react-resux';\nimport {userModel} from './models';\n\nexport const pageSubscriber = new Subscriber([userModel]).takeLatest(\n  'fetchPage', [\n    (action, {users}) => users.fetchUser(action),\n  ]\n);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"subscribers-api\"\n    }}>{`Subscriber's API`}</h3>\n    <p>{`For more info see `}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/classes/subscriber.md\"\n      }}>{`this`}</a>{`.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}