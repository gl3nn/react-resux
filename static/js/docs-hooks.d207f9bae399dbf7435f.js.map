{"version":3,"sources":["/Users/llira/Code/whatever/docs/hooks.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_llira_Code_whatever_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","isMDXComponent"],"mappings":"oWAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,SADR,SAGAL,OAAAE,EAAA,EAAAF,CAAA,+JAEAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,YADR,YAGAL,OAAAE,EAAA,EAAAF,CAAA,gIACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,qBADR,sBAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,wBADZ,0lBAqBLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,uBADR,wBAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,wBADZ,2lBAoBLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,cADR,cAGAL,OAAAE,EAAA,EAAAF,CAAA,kRAGAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,WADR,YAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,wBADZ,g8BAqCTX,EAAWY,gBAAiB","file":"static/js/docs-hooks.10a84f0c.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"hooks\"\n    }}>{`Hooks`}</h1>\n    <p>{`Kaytum is a hooks-first library. To read/change data from the store see useModel. Optionally, for an easier REST API\ninterfacing, see useService.`}</p>\n    <h2 {...{\n      \"id\": \"usemodel\"\n    }}>{`useModel`}</h2>\n    <p>{`Returns an object that can be used to access views/controllers for any given scope supported in the provided model.`}</p>\n    <h4 {...{\n      \"id\": \"read-data-example\"\n    }}>{`Read data example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import {Model} from 'kaytum';\nimport {modelX} from './modelX';\n\nexport default function({page}) {\n  const xData = useModel(modelX);\n\n  // We assume, for the sake of this example, that modelX has a byPage scope and a asItem view.\n  // And that there is already data in the store for that particular model.\n  //\n  // Views:\n  // xData.scopeName(scopeId) -> returns raw data\n  // xData.scopeName(scopeId).aView() -> returns raw data transformed with a view\n  const items = xData.byPage(page).asItem();\n\n  return items.map(\n    item => <span key={item.id}>{item.label}</span>\n  );\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"change-data-example\"\n    }}>{`Change data example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`  import {Model} from 'kaytum';\n  import {modelX} from './modelX';\n\n  export default function({page}) {\n  const xData = useModel(modelX);\n\n  // We assume, for the sake of this example, that modelX has a byPage scope and a disable\n  // controller. And that there is already data in the store for that particular model.\n  //\n  // Controllers:\n  // xData.scopeName(scopeId).disable() -> returns nothing but dispatchs a change action\n  const items = xData.byPage(page).disable();\n\n  return (\n    <button onClick={xData.byPage(page).disable}>Disable all in page #{page}</button>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"useservice\"\n    }}>{`useService`}</h2>\n    <p>{`Returns an object containing metadata related to the request in question. It's useful for abstracting rest API calls.\nIt's definitely optional, so if you rather use redux-saga, redux-pack, redux-thunks, or your own custom middleware,\nyou can ignore this hook.`}</p>\n    <h4 {...{\n      \"id\": \"example\"\n    }}>{`Example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import {Model} from 'kaytum';\nimport {userModel} from './userModel';\n\nconst userServiceSpec = {\n  model: userModel,\n  host: 'http://jsonplaceholder.typicode.com',\n  urls: {\n    byId: '/users/:id'\n  }\n};\n\nexport default function({userId}) {\n  const userData = useModel(userModel);\n  const userService = useService(userServiceSpec);\n\n  const userRequest = userService.byId(userId).get({pathParams: {id: userId}});\n\n  if (userRequest.isLoading) return 'Loading...';\n  else if (userRequest.errror) return \\`Error: {userRequest.error}\\`;\n\n  const user = userData.byId(userId);\n\n  return (\n    <span key={user.id}>\n      {user.name} <button onClick={\n        () => userService.byId(userId).delete({pathParams: {id: userId}})\n      }>Remove</button>\n    </span>\n  );\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}