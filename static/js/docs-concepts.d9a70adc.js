(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{"./docs/concepts.mdx":function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return r});var a=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),s=(n("./node_modules/react/index.js"),n("./node_modules/@mdx-js/react/dist/index.es.js")),i={},o="wrapper";function r(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(s.b)(o,Object.assign({},i,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"models"},"Models"),Object(s.b)("p",null,"Models are the most basic data structure/abstraction in this library. They require a set of options to be provided\nwhen initializing them."),Object(s.b)("h4",{id:"example"},"Example:"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"import {Model} from 'react-resux';\n\nconst articleModel = new Model({\n  namespace: 'articles',\n  scopes: ['byPage'],\n  fields: {},\n  views: {\n    asOption: article => ({\n      value: article.id,\n      label: `${article.id}. ${article.title}`,\n      disabled: article.disabled || false,\n    }),\n  },\n  controllers: {\n    disable: article => { article.disabled = true },\n  },\n});\n")),Object(s.b)("p",null,"The model will be used to generate the action types, actions, reducers and dispatchers for this particular entity\n(i.e. article). Below you can find a more in depth description on the many options that can be used during a model\ninstantiation."),Object(s.b)("h2",{id:"model-options"},"Model Options"),Object(s.b)("h3",{id:"namespace"},"Namespace"),Object(s.b)("p",null,"The namespace of a model will define where the model's scopes and instances will be stored. This value must be unique.\nRedux actions, related to this model, will also be prefixed with the provided namespace."),Object(s.b)("h4",{id:"syntax"},"Syntax"),Object(s.b)("p",null,"A string."),Object(s.b)("h3",{id:"scopes"},"Scopes"),Object(s.b)("p",null,"Scopes are custom aggregations of data for a particular model. A custom aggregation is referenced by an id and\nshould return a list of one or more model instances. That might make sense when you are paginating your data, so\nyou might be interested in having a byPage scope. A default scope will be avialble even when none is provided. This\ncan be configured by specifying modelInstance.defaultScope, defaults to byId, and modelInstance.defaultScopeIdField,\ndefaults to id, fields in model options."),Object(s.b)("h4",{id:"syntax-1"},"Syntax"),Object(s.b)("p",null,"A list of strings."),Object(s.b)("h3",{id:"fields"},"Fields"),Object(s.b)("p",null,"Fields determine how models are related. One model might reference another one (i.e. one to one relation) or\na set of model instances (i.e. one to many relation). The data that is set via a model will be transparently\nnormalized if it references nested models."),Object(s.b)("h4",{id:"syntax-2"},"Syntax"),Object(s.b)("p",null,"An object that might contain or not references to other models."),Object(s.b)("h3",{id:"views"},"Views"),Object(s.b)("p",null,"Views are data selectors. By default you already can get the entire model instance by referencing just scopes, however\nwhen you do need to transform data prior to using it, this might be useful. All views are cached. If the data a view\ndepends on change, then the cache will be automatically updated. For such we are using\n",Object(s.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/toomuchdesign/re-reselect"}),"re-reselect"),". This make it safe for you to just use shallow\nreference comparisons in order to determine when to re-render."),Object(s.b)("h4",{id:"syntax-3"},"Syntax"),Object(s.b)("p",null,"A function that takes one model instance as argument and returns an object."),Object(s.b)("h3",{id:"controllers"},"Controllers"),Object(s.b)("p",null,"Controllers are data modifiers. By default you can set, remove and reset any given scope. One can add extra\ncontrollers, in order to make it easier/safer to apply data changes in model instances. All changes must be made\nby accessing the provided model instance and changing it in place. Under the hood this library will generate a\ndifferent instance, for fields that changed, and apply them to the store. For such we are using\n",Object(s.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/immerjs/immer"}),"immer"),". Avoid using functional construncts, like map, reduce, etc,\nsince they will generate new instances in memory even when not necessary, which can cause unnecessary re-renders."),Object(s.b)("h4",{id:"syntax-4"},"Syntax"),Object(s.b)("p",null,"A function that takes one model instance plus a desired amount of arguments. The function doesn't need to return\ndata."))}r&&r===Object(r)&&Object.isExtensible(r)&&Object.defineProperty(r,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"docs/concepts.mdx"}}),r.isMDXComponent=!0}}]);
//# sourceMappingURL=docs-concepts.ec61ed80f08dbf66b9ec.js.map