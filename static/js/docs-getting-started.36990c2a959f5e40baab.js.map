{"version":3,"sources":["/Users/llira/Code/whatever/docs/gettingStarted.mdx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"2UAYMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,+NAEA,iBAAQ,CACN,GAAM,QADR,QAGA,iRAE6D,+BAAGC,WAAW,KAAQ,CAC/E,KAAQ,+CADiD,QAF7D,KAKA,iBAAQ,CACN,GAAM,iBADR,iBAGA,qKACmB,+BAAGA,WAAW,KAAQ,CACrC,KAAQ,4DADO,iBADnB,WAIA,iBAAQ,CACN,GAAM,4BADR,6BAGA,4MAEA,iBAAQ,CACN,GAAM,iCADR,kCAGA,+OAEA,iBAAQ,CACN,GAAM,+BADR,+BAGA,mKAEA,iBAAQ,CACN,GAAM,YADR,YAGA,gNACA,8IACA,iBAAQ,CACN,GAAM,WADR,YAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,0hCAwCL,mRAGA,iBAAQ,CACN,GAAM,iBADR,iBAGA,oEAAmD,+BAAGA,WAAW,KAAQ,CACrE,KAAQ,sDADuC,aAAnD,SAGF,+BAAGA,WAAW,KAAQ,CAChB,KAAQ,kDADd,SAHE,sBAMF,+BAAGA,WAAW,KAAQ,CAChB,KAAQ,+DADd,aANE,MASF,+BAAGA,WAAW,KAAQ,CAChB,KAAQ,8DADd,YATE,MAYF,+BAAGA,WAAW,KAAQ,CAChB,KAAQ,6DADd,WAZE,qCAeF,+BAAGA,WAAW,KAAQ,CAChB,KAAQ,4CADd,QAfE,KAkBA,iBAAQ,CACN,GAAM,eADR,gBAGA,0CAAyB,+BAAGA,WAAW,KAAQ,CAC3C,KAAQ,kCADa,QAAzB,KAGA,iBAAQ,CACN,GAAM,cADR,cAGA,4YAIA,iBAAQ,CACN,GAAM,aADR,YAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,0OAWL,iBAAQ,CACN,GAAM,mBADR,oBAGA,0CAAyB,+BAAGA,WAAW,KAAQ,CAC3C,KAAQ,uCADa,QAAzB,M,6KAOJJ,EAAWK,gBAAiB","file":"static/js/docs-getting-started.f5e5527f.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting Started`}</h1>\n    <p>{`This tutorial will introduce you to the basics of react-resux by building a counter application. The application will\nalso have the ability to confirm when a user increments/decrements its counter.`}</p>\n    <h2 {...{\n      \"id\": \"tldr\"\n    }}>{`TLDR`}</h2>\n    <p>{`This tutorial is composed of both counterWithConnectResux and counterWithConnectResuxAndConfirmationDialog examples.\nIn the end connectResux calls will be replaced with our hooks api,\nsuch as in counterWithHooks example. To see all examples click `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/kayak/react-resux#demos\"\n      }}>{`here`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <p>{`This tutorial assumes that you know the basics of how to use React. If you don't know what React is and how to use it,\nyou may wish to read `}<a parentName=\"p\" {...{\n        \"href\": \"https://facebook.github.io/react/tutorial/tutorial.html\"\n      }}>{`this tutorial`}</a>{` first.`}</p>\n    <h3 {...{\n      \"id\": \"do-i-need-to-learn-redux\"\n    }}>{`Do I need to learn redux?`}</h3>\n    <p>{`React-resux is heavily based on Redux. A basic understanding of the Redux library will help when dealing with\ncomplex situations and connecting of the data with React components.`}</p>\n    <h3 {...{\n      \"id\": \"do-i-need-to-learn-redux-saga\"\n    }}>{`Do I need to learn redux-saga?`}</h3>\n    <p>{`React-resux uses redux-saga for implementing asynchronous workflows. A basic understanding of the redux-saga library will help when dealing with\ncomplex situations and connecting of the data with React components.`}</p>\n    <h2 {...{\n      \"id\": \"how-to-follow-this-tutorial\"\n    }}>{`How to follow this tutorial`}</h2>\n    <p>{`You can write the code for this tutorial in the browser using the CodeSandbox playground, or in your preferred\ncode editor (e.g. VSCode).`}</p>\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`React-resux is a state container that combines the simplicity and ease of mutable data with the traceability of immutable data and the reactiveness and performance of observable data.`}</p>\n    <p>{`If the above sentence confused you, don't worry. We will dive deeper together and explore what it means step by step.`}</p>\n    <h4 {...{\n      \"id\": \"example\"\n    }}>{`Example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import {Model} from 'react-resux';\nimport _ from 'lodash';\n\nasync function fetchApi(url) {\n  return await fetch(url).then(response => response.json());\n}\n\nexport const userModel = new Model({\n    // Mandatory options\n    namespace: 'users',\n    state: {\n        loading: {},\n        data: {},\n    },\n\n    // Optional options\n    selectors: {\n        loadingByUser: (state, userId) => _.get(state, \\`loading[\\${userId}]\\`, true),\n        userById: (state, userId) => _.get(state, \\`data[\\${userId}]\\`),\n    },\n    reducers: {\n        saveUser(state, {data, userId}) {\n          state.loading[userId] = false;\n          state.data[userId] = data;\n        },\n    },\n    effects: {\n        *fetchUser({userId}, {call, put}, {saveUser}) {\n            try {\n                const data = yield call(fetchApi, \\`http://jsonplaceholder.typicode.com/users/\\${userId}\\`);\n                yield put(saveUser({data, userId}));\n             } catch (error) {\n                console.log(error)\n             }\n        },\n    },\n});\n`}</code></pre>\n    <p>{`The model will be used to generate the action types, actions, reducers, sagas and dispatchers for this particular\nentity (i.e. users). Below you can find a more in depth description on the many options that can be used during a\nmodel instantiation.`}</p>\n    <h3 {...{\n      \"id\": \"model-options\"\n    }}>{`Model Options`}</h3>\n    <p>{`An object with a few key-value pairs. Being `}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/interfaces/modeloptions.md#namespace\"\n      }}>{`namespace`}</a>{` and\n`}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/interfaces/modeloptions.md#state\"\n      }}>{`state`}</a>{` mandatory, while\n`}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/interfaces/modeloptions.md#optional-selectors\"\n      }}>{`selectors`}</a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/interfaces/modeloptions.md#optional-reducers\"\n      }}>{`reducers`}</a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/interfaces/modeloptions.md#optional-effects\"\n      }}>{`effects`}</a>{` are optional. For more info see\n`}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/interfaces/modeloptions.md\"\n      }}>{`this`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"modelss-api\"\n    }}>{`Models's API`}</h3>\n    <p>{`For more info see `}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/classes/model.md\"\n      }}>{`this`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"subscriber\"\n    }}>{`Subscriber`}</h2>\n    <p>{`Subscribers provide a way to link models' effects/reducers, so that they get triggered by the same non-namespaced\naction type, on a leading, latest, or every action basis. That is, they provide the means for generating redux sagas\nemploying takeLeading, takeLatest, or takeEvery effects. Those models' action creators will be available within the\nsubscriber's effects.`}</p>\n    <h4 {...{\n      \"id\": \"example-1\"\n    }}>{`Example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import {Subscriber} from 'react-resux';\nimport {userModel} from './models';\n\nexport const pageSubscriber = new Subscriber([userModel]).takeLatest(\n  'fetchPage', [\n    (action, {users}) => users.fetchUser(action),\n  ]\n);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"subscribers-api\"\n    }}>{`Subscriber's API`}</h3>\n    <p>{`For more info see `}<a parentName=\"p\" {...{\n        \"href\": \"/react-resux/classes/subscriber.md\"\n      }}>{`this`}</a>{`.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}